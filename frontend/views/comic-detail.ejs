<!doctype html>
<html lang="en">
<head>
    <title><%= comic.title %></title>
    <%- include("partials/head") %>
    <link rel="stylesheet" href="/css/comic-detail.css">
</head>
<body>
<%- include("partials/navbar") %>
<div class="main-content">
    <%- include("partials/navbar2") %>
    <div class="comic-detail-page-container">
        <div class="top-layout">
            <!-- Comic Details Container -->
            <div class="detail-card comic-details-card">
                <div class="details-content">
                    <div class="comic-cover">
                        <img src="<%= comic.cover %>" alt="Cover of <%= comic.title %>">
                    </div>
                    <div class="comic-info">
                        <h1><%= comic.title %></h1>
                        <% if (comic.author) { %>
                            <p><strong>Author:</strong> <%= comic.author.username %></p>
                        <% } %>
                        <h3>Synopsis</h3>
                        <p><%= comic.synopsis %></p>
                        <h3>Tags</h3>
                        <ul class="tags-list">
                            <% comic.tags.forEach(tag => { %>
                                <li><%= tag %></li>
                            <% }); %>
                        </ul>
                        <p><strong>Release Date:</strong> <%= new Date(comic.releaseDate).toLocaleDateString() %></p>
                    </div>
                </div>
            </div>

            <!-- Stats Container -->
            <div class="detail-card stats-card">
                <h2>Stats</h2>
                <ul>
                    <li><span>Views:</span> <strong><%= comic.stats.views %></strong></li>
                    <li><span>Bookmarks:</span> <strong><%= comic.stats.bookmarks %></strong></li>
                    <li><span>Likes:</span> <strong><%= comic.stats.likes %></strong></li>
                    <li><span>Comments:</span> <strong><%= comic.stats.comments %></strong></li>
                </ul>
            </div>
        </div>

        <!-- Chapters Container -->
        <div class="detail-card chapters-card">
            <h2>Chapters</h2>
            <% if (comic.chapters && comic.chapters.length > 0) { %>
                <!-- Chapter listing can go here -->
            <% } else { %>
                <p>No chapters have been uploaded yet.</p>
            <% } %>
            <button class="new-chapter-btn" id="openModal">+ New Chapter</button>
        </div>
    </div>
</div>

<%- include("partials/new-chapter-modal.ejs", { comic: comic }) %>

<script>
    const modal = document.getElementById("modal");
    const openBtn = document.getElementById("openModal");
    const closeBtn = document.getElementById("closeModal");

    const pagesInput = document.getElementById('pages');
    const previewContainer = document.getElementById('image-preview-container');
    const form = document.querySelector('.new-comic-form');

    // Ordered list of items: { file: File, url: string }
    let items = [];
    // Track created object URLs so we can revoke them
    let urlsToRevoke = [];

    // Ensure native validation is disabled (backup to novalidate on the form tag)
    if (form) form.setAttribute('novalidate', '');

    // Modal open/close (guarded)
    if (openBtn && modal) {
        openBtn.addEventListener("click", () => {
            modal.classList.add("open");
        });
    }

    if (closeBtn && modal) {
        closeBtn.addEventListener("click", () => {
            modal.classList.remove("open");
            resetFormAndPreviews();
        });
    }

    window.addEventListener('beforeunload', () => {
        revokeAllURLs();
    });

    // Handle file selection WITHOUT resetting the form
    if (pagesInput && previewContainer) {
        pagesInput.addEventListener('change', (e) => {
            const files = Array.from(e.target.files || []);

            // Only clear previews/state, not the form fields
            clearPreviewsAndState();

            if (files.length === 0) return;

            items = files.map((file) => {
                const url = URL.createObjectURL(file);
                urlsToRevoke.push(url);
                return { file, url };
            });

            renderPreviewsOnce();
        });
    }

    // Render thumbnails once in order
    function renderPreviewsOnce() {
        if (!previewContainer) return;
        previewContainer.innerHTML = '';
        const frag = document.createDocumentFragment();

        items.forEach((it, index) => {
            frag.appendChild(createPreviewElement(it.url, index));
        });

        previewContainer.appendChild(frag);
        updateAllLabelsAndButtons();
    }

    // Create a single preview element
    function createPreviewElement(url, index) {
        const item = document.createElement('div');
        item.className = 'preview-item';
        item.dataset.index = String(index);

        const img = document.createElement('img');
        img.src = url;
        img.loading = 'lazy';
        item.appendChild(img);

        const orderLabel = document.createElement('div');
        orderLabel.className = 'order-label';
        orderLabel.textContent = `Page ${index + 1}`;
        item.appendChild(orderLabel);

        const swapButtons = document.createElement('div');
        swapButtons.className = 'swap-buttons';

        const leftBtn = document.createElement('button');
        leftBtn.type = 'button';
        leftBtn.className = 'swap-btn';
        leftBtn.dataset.dir = '-1';
        leftBtn.textContent = '◀';
        swapButtons.appendChild(leftBtn);

        const rightBtn = document.createElement('button');
        rightBtn.type = 'button';
        rightBtn.className = 'swap-btn';
        rightBtn.dataset.dir = '1';
        rightBtn.textContent = '▶';
        swapButtons.appendChild(rightBtn);

        item.appendChild(swapButtons);
        return item;
    }

    // Event delegation for swapping (guarded)
    if (previewContainer) {
        previewContainer.addEventListener('click', (evt) => {
            const btn = evt.target.closest('.swap-btn');
            if (!btn) return;

            const dir = Number(btn.dataset.dir);
            const itemEl = btn.closest('.preview-item');
            if (!itemEl) return;

            const fromIndex = Array.prototype.indexOf.call(previewContainer.children, itemEl);
            const toIndex = fromIndex + dir;

            if (toIndex < 0 || toIndex >= items.length) return;

            swap(fromIndex, toIndex);
        });
    }

    function swap(i, j) {
        if (i === j) return;
        [items[i], items[j]] = [items[j], items[i]];

        const nodeA = previewContainer?.children[i];
        const nodeB = previewContainer?.children[j];
        if (!nodeA || !nodeB) return;
        swapNodes(nodeA, nodeB);
        updateAllLabelsAndButtons();
    }

    function swapNodes(a, b) {
        const parent = a.parentNode;
        const aNext = a.nextSibling;
        const bNext = b.nextSibling;

        if (aNext === b) {
            parent.insertBefore(b, a);
        } else if (bNext === a) {
            parent.insertBefore(a, b);
        } else {
            parent.insertBefore(b, aNext);
            parent.insertBefore(a, bNext);
        }
    }

    function updateAllLabelsAndButtons() {
        if (!previewContainer) return;
        const children = Array.from(previewContainer.children);
        const lastIndex = children.length - 1;

        children.forEach((el, idx) => {
            el.dataset.index = String(idx);

            const label = el.querySelector('.order-label');
            if (label) label.textContent = `Page ${idx + 1}`;

            const btns = el.querySelectorAll('.swap-btn');
            if (btns[0]) btns[0].disabled = idx === 0;
            if (btns[1]) btns[1].disabled = idx === lastIndex;
        });
    }

    // Simple manual validation for required fields
    function validateRequiredFields() {
        if (!form) return false;

        const title = form.querySelector('#title');
        const chapterNumber = form.querySelector('#chapterNumber');
        const releaseDate = form.querySelector('#releaseDate');

        if (!title?.value.trim()) {
            alert('Title is required.');
            title?.focus();
            return false;
        }
        if (!chapterNumber?.value) {
            alert('Chapter Number is required.');
            chapterNumber?.focus();
            return false;
        }
        if (!releaseDate?.value) {
            alert('Release Date is required.');
            releaseDate?.focus();
            return false;
        }
        if (items.length === 0) {
            alert('Please upload at least one page.');
            pagesInput?.focus();
            return false;
        }
        return true;
    }

    // Form submit with correct order
    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!validateRequiredFields()) return;

            const formData = new FormData(form);
            formData.delete('pages');

            // Append files in current order
            items.forEach(({ file }) => formData.append('pages', file));

            const submitBtn = form.querySelector('[type="submit"]');
            if (submitBtn) submitBtn.disabled = true;

            try {
                const res = await fetch(form.action, { method: 'POST', body: formData });

                if (res.redirected) {
                    window.location.href = res.url;
                    return;
                }

                let data = null;
                try { data = await res.clone().json(); } catch (_) {}

                if (res.ok) {
                    if (data && (data.redirect || data.url || data.location)) {
                        window.location.href = data.redirect || data.url || data.location;
                        return;
                    }
                    window.location.reload();
                } else {
                    const msg = data?.message || (await res.text());
                    alert(`Error submitting form: ${msg}`);
                }
            } catch (err) {
                console.error(err);
                alert('An error occurred during submission.');
            } finally {
                if (submitBtn) submitBtn.disabled = false;
            }
        });
    } else {
        console.warn('New chapter form not found on this page.');
    }

    // Utilities
    function revokeAllURLs() {
        urlsToRevoke.forEach(url => URL.revokeObjectURL(url));
        urlsToRevoke = [];
    }

    // Clear previews/state without touching form field values
    function clearPreviewsAndState() {
        revokeAllURLs();
        items = [];
        if (previewContainer) previewContainer.innerHTML = '';
    }

    // Full reset, used on modal close
    function resetFormAndPreviews() {
        clearPreviewsAndState();
        if (form) form.reset();
    }
</script>

<%- include("partials/scripts") %>
</body>
</html>