<!doctype html>
<html lang="en">
<head>
    <title><%= comic.title %></title>
    <%- include("partials/head") %>
    <link rel="stylesheet" href="/css/comic-detail.css">
</head>
<body>
<%- include("partials/navbar") %>
<div class="main-content">
    <%- include("partials/navbar2") %>
    <div class="comic-detail-page-container">
        <div class="top-layout">
            <!-- Comic Details Container -->
            <div class="detail-card comic-details-card">
                <div class="details-content">
                    <div class="comic-cover">
                        <img src="<%= comic.cover %>" alt="Cover of <%= comic.title %>">
                    </div>
                    <div class="comic-info">
                        <h1><%= comic.title %></h1>
                        <% if (comic.author) { %>
                            <p><strong>Author:</strong> <%= comic.author.username %></p>
                        <% } %>
                        <h3>Synopsis</h3>
                        <p><%= comic.synopsis %></p>
                        <h3>Tags</h3>
                        <ul class="tags-list">
                            <% comic.tags.forEach(tag => { %>
                                <li><%= tag %></li>
                            <% }); %>
                        </ul>
                        <p><strong>Release Date:</strong> <%= new Date(comic.releaseDate).toLocaleDateString() %></p>
                    </div>
                </div>
            </div>

            <!-- Stats Container -->
            <div class="detail-card stats-card">
                <h2>Stats</h2>
                <ul>
                    <li><span>Views:</span> <strong><%= comic.stats.views %></strong></li>
                    <li><span>Bookmarks:</span> <strong><%= comic.stats.bookmarks %></strong></li>
                    <li><span>Likes:</span> <strong><%= comic.stats.likes %></strong></li>
                    <li><span>Comments:</span> <strong><%= comic.stats.comments %></strong></li>
                </ul>
            </div>
        </div>

        <!-- Chapters Container -->
        <div class="detail-card chapters-card">
            <h2>Chapters</h2>

            <% if (comic.chapters && comic.chapters.length > 0) { %>
                <div class="chapters-list">
                    <% comic.chapters.forEach(function(chapter) { %>
                        <div class="chapter-row">
                            <!-- top-right actions -->
                            <div class="chapter-actions">
                                <button class="action-btn js-toggle-edit" type="button" aria-label="Edit chapter title" data-target="edit-<%= chapter._id %>">âœŽ</button>
                                <form action="/chapter/<%= chapter._id %>/delete" method="post" onsubmit="return confirm('Delete this chapter? This cannot be undone.');" class="inline-form">
                                    <button class="action-btn danger" type="submit" aria-label="Delete chapter">ðŸ—‘</button>
                                </form>
                            </div>

                            <div class="chapter-thumb">
                                <% if (chapter.pages && chapter.pages.length > 0) { %>
                                    <a href="/chapter?chapterid=<%= chapter._id %>">
                                        <img src="<%= chapter.pages[0] %>" alt="Page 1 of <%= chapter.title %>">
                                    </a>
                                <% } else { %>
                                    <a href="/manage-uploads/comic/<%= comic._id %>/chapter/<%= chapter._id %>">
                                        <div class="thumb-placeholder">No preview</div>
                                    </a>
                                <% } %>
                            </div>

                            <div class="chapter-info">
                                <a class="chapter-link" href="/chapter?chapterid=<%= chapter._id %>">
                                    <h3>
                                        <%= chapter.title %>
                                        <% if (chapter.paywalled) { %>
                                            <span class="badge badge-paywalled" title="Paywalled">ðŸ’²</span>
                                        <% } %>
                                        <% if (chapter.nsfw) { %>
                                            <span class="badge badge-nsfw" title="NSFW">18+</span>
                                        <% } %>
                                    </h3>
                                    <p>Chapter <%= chapter.chapterNumber %></p>
                                </a>
                                <% if (chapter.releaseDate) { %>
                                    <p class="chapter-meta">Released: <%= new Date(chapter.releaseDate).toLocaleDateString() %></p>
                                <% } %>

                                <!-- inline edit form (hidden by default) -->
                                <form id="edit-<%= chapter._id %>" class="inline-edit-form" action="/chapter/<%= chapter._id %>/title" method="post">
                                    <input type="text" name="title" value="<%= chapter.title %>" required>
                                    <label class="checkbox-inline">
                                        <input type="checkbox" name="paywalled" <%= chapter.paywalled ? 'checked' : '' %> />
                                        Paywalled
                                    </label>
                                    <label class="checkbox-inline">
                                        <input type="checkbox" name="nsfw" <%= chapter.nsfw ? 'checked' : '' %> />
                                        NSFW
                                    </label>
                                    <button type="submit" class="save-btn">Save</button>
                                    <button type="button" class="cancel-btn light js-cancel-edit" data-target="edit-<%= chapter._id %>">Cancel</button>
                                </form>
                            </div>

                            <!-- bottom-right stats -->
                            <div class="chapter-stats">
                                <div class="stat">
                                    <!-- eye icon -->
                                    <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M12 5c-7 0-10 7-10 7s3 7 10 7 10-7 10-7-3-7-10-7zm0 12a5 5 0 1 1 0-10 5 5 0 0 1 0 10z"/></svg>
                                    <span><%= (chapter.stats && chapter.stats.views) || 0 %></span>
                                </div>
                                <div class="stat">
                                    <!-- bookmark icon -->
                                    <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M6 2h12a1 1 0 0 1 1 1v19l-7-4-7 4V3a1 1 0 0 1 1-1z"/></svg>
                                    <span><%= (chapter.stats && chapter.stats.bookmarks) || 0 %></span>
                                </div>
                                <div class="stat">
                                    <!-- heart icon -->
                                    <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M12 21s-7.5-4.35-10-9c-2-3.8 1-8 5-8 2.1 0 3.7 1.2 5 3 1.3-1.8 2.9-3 5-3 4 0 7 4.2 5 8-2.5 4.65-10 9-10 9z"/></svg>
                                    <span><%= (chapter.stats && chapter.stats.likes) || 0 %></span>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                </div>
            <% } else { %>
                <p>No chapters have been uploaded yet.</p>
            <% } %>

            <button class="new-chapter-btn" id="openModal">+ New Chapter</button>
        </div>
    </div>
</div>

<%- include("partials/new-chapter-modal.ejs", { comic: comic }) %>

<script>
    const openBtn = document.getElementById("openModal");
    const closeBtn = document.getElementById("closeModal");
    const modal = document.getElementById("modal");

    const pagesInput = document.getElementById('pages');
    const previewContainer = document.getElementById('image-preview-container');
    const form = document.querySelector('.new-comic-form');

    // Ordered list of items: { file: File, url: string }
    let items = [];
    // Track created object URLs so we can revoke them
    let urlsToRevoke = [];

    // Modal open/close
    openBtn.addEventListener("click", () => {
        modal.classList.add("open");
    });

    closeBtn.addEventListener("click", () => {
        modal.classList.remove("open");
        hardReset();
        form.reset();
    });

    window.addEventListener('beforeunload', () => {
        revokeAllURLs();
    });

    // Handle file selection
    pagesInput.addEventListener('change', (e) => {
        const files = Array.from(e.target.files || []);
        hardReset(); // clear previous previews and URLs

        if (files.length === 0) return;

        // Build items once using object URLs (fast and synchronous)
        items = files.map((file) => {
            const url = URL.createObjectURL(file);
            urlsToRevoke.push(url);
            return { file, url };
        });

        renderPreviewsOnce();
    });

    // Render thumbnails once in order
    function renderPreviewsOnce() {
        previewContainer.innerHTML = '';
        const frag = document.createDocumentFragment();

        items.forEach((it, index) => {
            frag.appendChild(createPreviewElement(it.url, index));
        });

        previewContainer.appendChild(frag);
        updateAllLabelsAndButtons();
    }

    // Create a single preview element
    function createPreviewElement(url, index) {
        const item = document.createElement('div');
        item.className = 'preview-item';
        item.dataset.index = String(index);

        const img = document.createElement('img');
        img.src = url;
        img.loading = 'lazy';
        item.appendChild(img);

        const orderLabel = document.createElement('div');
        orderLabel.className = 'order-label';
        orderLabel.textContent = `Page ${index + 1}`;
        item.appendChild(orderLabel);

        const swapButtons = document.createElement('div');
        swapButtons.className = 'swap-buttons';

        const leftBtn = document.createElement('button');
        leftBtn.type = 'button';
        leftBtn.className = 'swap-btn';
        leftBtn.dataset.dir = '-1';
        leftBtn.textContent = 'â—€';
        swapButtons.appendChild(leftBtn);

        const rightBtn = document.createElement('button');
        rightBtn.type = 'button';
        rightBtn.className = 'swap-btn';
        rightBtn.dataset.dir = '1';
        rightBtn.textContent = 'â–¶';
        swapButtons.appendChild(rightBtn);

        item.appendChild(swapButtons);
        return item;
    }

    // Event delegation for swapping
    previewContainer.addEventListener('click', (evt) => {
        const btn = evt.target.closest('.swap-btn');
        if (!btn) return;

        const dir = Number(btn.dataset.dir);
        const itemEl = btn.closest('.preview-item');
        if (!itemEl) return;

        const fromIndex = Array.prototype.indexOf.call(previewContainer.children, itemEl);
        const toIndex = fromIndex + dir;

        if (toIndex < 0 || toIndex >= items.length) return;

        swap(fromIndex, toIndex);
    });

    // Swap items and DOM nodes, then refresh labels and disabled states
    function swap(i, j) {
        if (i === j) return;

        // Swap data
        [items[i], items[j]] = [items[j], items[i]];

        // Swap DOM nodes in place (no re-render)
        const nodeA = previewContainer.children[i];
        const nodeB = previewContainer.children[j];
        swapNodes(nodeA, nodeB);

        // Fix labels and disabled states
        updateAllLabelsAndButtons();
    }

    function swapNodes(a, b) {
        const parent = a.parentNode;
        const aNext = a.nextSibling;
        const bNext = b.nextSibling;

        // Insert b where a was
        if (aNext === b) {
            parent.insertBefore(b, a);
        } else if (bNext === a) {
            parent.insertBefore(a, b);
        } else {
            parent.insertBefore(b, aNext);
            parent.insertBefore(a, bNext);
        }
    }

    function updateAllLabelsAndButtons() {
        const children = Array.from(previewContainer.children);
        const lastIndex = children.length - 1;

        children.forEach((el, idx) => {
            el.dataset.index = String(idx);

            const label = el.querySelector('.order-label');
            if (label) label.textContent = `Page ${idx + 1}`;

            const btns = el.querySelectorAll('.swap-btn');
            if (btns[0]) btns[0].disabled = idx === 0;            // left
            if (btns[1]) btns[1].disabled = idx === lastIndex;   // right
        });
    }

    // Form submit with correct order
    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        if (items.length === 0) {
            alert('Please upload at least one page.');
            return;
        }

        const formData = new FormData(form);
        formData.delete('pages');

        // Append files in current order (left-to-right, top-to-bottom)
        items.forEach(({ file }) => formData.append('pages', file));

        try {
            const res = await fetch(form.action, { method: 'POST', body: formData });
            if (res.ok) {
                // Free memory before navigating
                revokeAllURLs();
                window.location.reload();
            } else {
                const msg = await res.text();
                alert(`Error submitting form: ${msg}`);
            }
        } catch (err) {
            console.error(err);
            alert('An error occurred during submission.');
        }
    });

    // Utilities
    function revokeAllURLs() {
        urlsToRevoke.forEach(url => URL.revokeObjectURL(url));
        urlsToRevoke = [];
    }

    function hardReset() {
        revokeAllURLs();
        items = [];
        previewContainer.innerHTML = '';
    }

    // Inline edit show/hide handlers
    document.addEventListener('click', (e) => {
        const toggleBtn = e.target.closest('.js-toggle-edit');
        if (toggleBtn) {
            const id = toggleBtn.dataset.target;
            const form = document.getElementById(id);
            if (form) form.classList.toggle('open');
        }
        const cancelBtn = e.target.closest('.js-cancel-edit');
        if (cancelBtn) {
            const id = cancelBtn.dataset.target;
            const form = document.getElementById(id);
            if (form) form.classList.remove('open');
        }
    });
</script>

<%- include("partials/scripts") %>
</body>
</html>